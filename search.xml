<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Atom | 帅气的编辑器</title>
      <link href="/2018/11/20/Atom-%E5%B8%85%E6%B0%94%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2018/11/20/Atom-%E5%B8%85%E6%B0%94%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong> Atom 文本编辑器 </strong>，是由Github出品的基于 Electron/Nodejs的半开源文本编辑器。<a href="https://atom.io" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>扯淡的东西稍后再写。。。</p>]]></content>
      
      
      <categories>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Stan Lee的漫威宇宙</title>
      <link href="/2018/11/15/Stan-Lee%E7%9A%84%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99/"/>
      <url>/2018/11/15/Stan-Lee%E7%9A%84%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99/</url>
      
        <content type="html"><![CDATA[<p><strong> 漫威失去了最伟大的超级英雄和最重要的彩蛋，可是超级英雄电影会继续 </strong><br><a id="more"></a></p><p><img src="https://s1.ax2x.com/2018/11/15/5zyril.gif" alt="5zyril.gif"><br><strong><em> Excelsior  </em></strong><br><blockquote class="blockquote-center"><p>You know, my motto is ‘Excelsior.’ That’s an old word that means ‘upward and onward to greater glory.’ Keep moving forward, and if it’s time to go, it’s time. Nothing lasts forever.</p></blockquote><br>斯坦·李曾说：<br>我的座右铭就是“Excelsior”，这是一个古老的词，意思是“朝着更光辉的伟业向上、前进”。勇往直前吧，如果是时候前进了，就前进。没有什么天长地久，抓住眼前。</p><p>在六十年代早期，李被要求去组建一个超级英雄团队来同DC旗下的“正义联盟”竞争。在杰克·科比（Jack Kirby）和史蒂夫·迪克特（Steve Ditko）等人的鼎力相助下，斯坦·李促成了一场革命，尽管他当时并没有预见这一点。<br><img src="https://s1.ax2x.com/2018/11/15/5zyLhB.jpg" alt="5zyLhB.jpg"></p><p>1941年，斯坦利生平第一部作品问世，它就是《美国队长》系列漫画的第三部，斯坦利负责填写内容，漫画由别人来画。他开始第一次使用笔名“斯坦·李”。</p><p>他第一次在荧屏上露脸是1989年的电视电影《无敌浩克的审判》。</p><p>老爷子一生有过太多的坎坷，太多的故事，一路走过他用着自己过往创造出属于这个世界的超级英雄。</p><blockquote><p>蜘蛛侠  寄住在收入不高的伯父伯母家里，生活窘迫，在学校受同学欺负，自卑而内向</p></blockquote><blockquote><p>美国队长 原本瘦弱多病，是被人嘲笑和欺负的对象，他最大的优势就是挨打时经打，以及嘴硬</p></blockquote><p>在斯坦·李的英雄世界里，做一个超级英雄并不是一件容易的事情。</p><p>斯坦·李告诉我们，能力越大责任越大，要追求自由，也要心怀世界。</p><p>2018年11月12日老爷子走了，但是超级英雄的时代还远远没有结束…</p><p><img src="https://s1.ax2x.com/2018/11/15/5zyfkz.gif" alt="5zyfkz.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Movie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Movie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>We are Venom</title>
      <link href="/2018/11/15/We-are-Venom/"/>
      <url>/2018/11/15/We-are-Venom/</url>
      
        <content type="html"><![CDATA[<p>《毒液：致命守护者》(Venom)<br>主   演 : 汤姆·哈迪<br>上映时间 : 2018年11月9日在中国大陆上映</p><a id="more"></a><p>什么是超级英雄，漫威和DC从来没有正面的说出超级英雄的标准定义。我们通过电影总结出超级英雄他们拥有超越普通人的特殊能力，可以做出一些不同寻常的壮举和英勇的行为，这些一类人（或者不是人）就被我们称为超级英雄。</p><p>最近的一段时间，漫威在超级英雄的塑造方面真的是越来越超脱了，简直就是颠覆了我们对于内心中超级英雄的定义。首先的就是死侍，突出的特点就是一个字 – 贱！我估计也只有这一个超级英雄会被授予这种评价。</p><p><strong> 再来就是我们今天所说的主角了毒液（Venom）。 </strong></p><p>再没有看电影之前，对于毒液的认知还存在与老版本的蜘蛛侠3（2007年山姆·雷米导演），当时的我们理解的毒液就是一个外星寄生兽，可以强化宿主的能力，同样可以放大宿主的邪念。</p><p>但是走进电影院才发现，所有的一切都被颠覆了，毒液仅仅是那种外星寄生兽中一个小屌丝，来到了地球才发现自己原来可以这么强大，这个星球可以这么有趣，这里的景色可以这么美丽，所以影片中毒液给我的感觉就是强大加上一点点的蠢萌，我喜欢这个不是那么好看但是却可以走到我心中的超级英雄。</p><p><img src="https://s1.ax2x.com/2018/11/15/5zveMN.jpg" alt="5zveMN.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zyXf2.jpg" alt="5zyXf2.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zyTcQ.gif" alt="5zyTcQ.gif"><br><img src="https://s1.ax2x.com/2018/11/15/5zyHQE.gif" alt="5zyHQE.gif"><br><img src="https://s1.ax2x.com/2018/11/15/5zyBgn.jpg" alt="5zyBgn.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zy593.gif" alt="5zy593.gif"><br><img src="https://s1.ax2x.com/2018/11/15/5zvqJ6.jpg" alt="5zvqJ6.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zyYIS.jpg" alt="5zyYIS.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zyVZz.jpg" alt="5zyVZz.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zyzXa.jpg" alt="5zyzXa.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zyDUG.jpg" alt="5zyDUG.jpg"><br><img src="https://s1.ax2x.com/2018/11/15/5zy9OK.jpg" alt="5zy9OK.jpg"></p><p><strong> 总结一句，很棒的电影！ </strong></p>]]></content>
      
      
      <categories>
          
          <category> Movie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Movie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pulsar替代Kafka？</title>
      <link href="/2018/11/08/Pulsar%E6%9B%BF%E4%BB%A3Kafka%EF%BC%9F/"/>
      <url>/2018/11/08/Pulsar%E6%9B%BF%E4%BB%A3Kafka%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><strong> Pulsar是否要替代Kafka？ </strong></p><a id="more"></a><p>具体内容我也没看呢，反正先占着位置</p><blockquote class="blockquote-center"><p>有一篇文章可以先看看<a href="https://blog.csdn.net/liyiming2017/article/details/82875068" target="_blank" rel="noopener">未来是Pulsar的吗</a></p></blockquote><p><strong> 个人理解的 Pulsar 优势 </strong></p><p>相对于kafka来说，Pulsar的优势就是数据与服务的隔离，Pulsar数据单独存储在BookKeeper中。<br>而且在后续上还要引入sql查询系统，方便进行数据的分析而且对于集群的调整非常方便。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pulsar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo(Next) + GitHub + Netlify</title>
      <link href="/2018/11/06/Hexo-Next-GitHub-Netlify/"/>
      <url>/2018/11/06/Hexo-Next-GitHub-Netlify/</url>
      
        <content type="html"><![CDATA[<p><strong> 18步搞定自动发布个人博客 </strong></p><a id="more"></a><p>本篇文章就是按照最基本的操作来完成的一个自动化博客搭建，完全的傻瓜式的操作，跟着教程绝对搞的定。</p><p><strong> 重点是这个教程是Windows系统的，OS/Linux自行根据步骤脑补一下 </strong></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们用到的主要环境就是Node.js，这玩意是根本，所以搞定它！</p><h3 id="1、Node-js"><a href="#1、Node-js" class="headerlink" title="1、Node.js"></a>1、Node.js</h3><p>官网直接下载完事，根据自己的系统整一个最新版的安装吧<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">没有环境的去下载</a></p><h3 id="2、GitBash"><a href="#2、GitBash" class="headerlink" title="2、GitBash"></a>2、GitBash</h3><p>同样的另一个必要环节，Git没有的话也去下载安装一个,也搞最新的版本吧<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">没有的也去整一个</a></p><h3 id="3、-检查环境是否搞定"><a href="#3、-检查环境是否搞定" class="headerlink" title="3、 检查环境是否搞定"></a>3、 检查环境是否搞定</h3><p>检查Node.js 有没有搞定</p><blockquote><p>node -v</p></blockquote><p><img src="https://i.loli.net/2018/11/09/5be52ef99d917.jpg" alt="Node.js"></p><p>检查GitBash有没有搞定直接选个文件夹鼠标右键就OK<br><img src="https://i.loli.net/2018/11/09/5be52ef949c3c.png" alt="GitBash"></p><h3 id="4、注册一个Github"><a href="#4、注册一个Github" class="headerlink" title="4、注册一个Github"></a>4、注册一个Github</h3><p>Github我们直接注册一个，注册都不会的就放弃吧<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p><h2 id="环境准备完毕，下面就正式开始了"><a href="#环境准备完毕，下面就正式开始了" class="headerlink" title="环境准备完毕，下面就正式开始了"></a>环境准备完毕，下面就正式开始了</h2><h3 id="5、看心情选位置建个文件夹"><a href="#5、看心情选位置建个文件夹" class="headerlink" title="5、看心情选位置建个文件夹"></a>5、看心情选位置建个文件夹</h3><p>在当前文件夹下启动命令行，之前我们已经安装了gitbash所以可以直接右键启动gitbash或许方便一些<br><img src="https://i.loli.net/2018/11/12/5be8d7fce5cdf.png" alt="gitbashhear.png"></p><h3 id="6、安装hexo"><a href="#6、安装hexo" class="headerlink" title="6、安装hexo"></a>6、安装hexo</h3><p>下面重点就来了，我们用的是Hexo框架，Hexo本身就集成blog框架，而且目前已经有很多成熟的主题可以使用所以我们直接选择使用hexo</p><p>安装指令：</p><blockquote><p>npm install hexo -g</p></blockquote><p>这个过程可能需要一点点时间，不要着急静静等待<br><img src="https://i.loli.net/2018/11/12/5be8d956353a5.png" alt="installHexoo.png"></p><h3 id="7、检查hexo是否成功安装"><a href="#7、检查hexo是否成功安装" class="headerlink" title="7、检查hexo是否成功安装"></a>7、检查hexo是否成功安装</h3><p> 同样我们确认一下hexo是否成功安装</p><blockquote><p>hexo -v</p></blockquote><p> <img src="https://i.loli.net/2018/11/12/5be8de7c63ff2.png" alt="hexo-v.png"></p><h3 id="8、hexo初始化"><a href="#8、hexo初始化" class="headerlink" title="8、hexo初始化"></a>8、hexo初始化</h3><p>成功安装完hexo，我们就可以对hexo进行初始化，就是拉取hexo的框架代码，这一步骤时间可能会久一点，毕竟是下载文件</p><blockquote><p>hexo init</p></blockquote><p>等待的过程中你可以看见文件一点点被下载过来，最后你会看见提示 Start blogging with Hexo！是不是很激动了！<br><img src="https://i.loli.net/2018/11/12/5be8da5f9b3c6.png" alt="hexointi.png"></p><h3 id="9、安装需要的组件"><a href="#9、安装需要的组件" class="headerlink" title="9、安装需要的组件"></a>9、安装需要的组件</h3><p>初始化完成后，我们需要继续安装hexo的其他组件</p><blockquote><p>npm install</p></blockquote><p><img src="https://i.loli.net/2018/11/12/5be8db3515f02.png" alt="npm-install.png"></p><h3 id="10、hexo生成"><a href="#10、hexo生成" class="headerlink" title="10、hexo生成"></a>10、hexo生成</h3><p>这时候我们不需要进行修改，先按照模板生成一下(hexo generate 可以直接简写如下)</p><blockquote><p>hexo g</p></blockquote><p>我们可以直接看出指令帮我们生成了静态页面<br><img src="https://i.loli.net/2018/11/12/5be8dc5b5ddde.png" alt="hexog.png"></p><h3 id="11、hexo本地启动"><a href="#11、hexo本地启动" class="headerlink" title="11、hexo本地启动"></a>11、hexo本地启动</h3><p>生成玩页面，我们就让服务在我们本地跑起来(hexo server 可以直接简写如下)</p><blockquote><p>hexo s</p></blockquote><p>这时候本地默认使用的是4000端口，可能会被占用<br><img src="https://i.loli.net/2018/11/12/5be8dcf2e772e.png" alt="port4000.png"><br>我们可以更换本地的端口号(hexo server -p 5000)</p><blockquote><p>hexo s -p 5000</p></blockquote><p><img src="https://i.loli.net/2018/11/12/5be8dd781741e.png" alt="port5000.png"><br>Hexo is running!Hexo is running!Hexo is running!</p><p>在浏览器打开<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a> 我们就可以看到Hexo的默认blog主题<br><img src="https://i.loli.net/2018/11/12/5be8ddd37e0d5.png" alt="hexoDefault.png"></p><h3 id="12、新建一篇blog"><a href="#12、新建一篇blog" class="headerlink" title="12、新建一篇blog"></a>12、新建一篇blog</h3><p>我们回到刚刚的命令行，ctrl+c 停止服务，然后新建一片文章</p><blockquote><p>hexo new post “Hexo Hello World!”</p></blockquote><p><img src="https://i.loli.net/2018/11/12/5be8e20b6a122.png" alt="helloworld.png"><br>根据路径找到对应的 .md文件(\source_posts\Hexo-Hello-World.md)就可以使用markdown写我们自己的东西了<br>然后使用</p><blockquote><p>hexo g</p></blockquote><p>打包</p><blockquote><p>hexo s</p></blockquote><p>启动服务，我们就可以看到我们自己新建的文章。</p><h2 id="代码打包上传到并发布"><a href="#代码打包上传到并发布" class="headerlink" title="代码打包上传到并发布"></a>代码打包上传到并发布</h2><h3 id="13、gitbash配置"><a href="#13、gitbash配置" class="headerlink" title="13、gitbash配置"></a>13、gitbash配置</h3><p>gitbash配置可以自行查找教程<a href="https://blog.csdn.net/zzfenglin/article/details/53147840" target="_blank" rel="noopener">附送一个传送门</a></p><h3 id="14、配置hexo的repository"><a href="#14、配置hexo的repository" class="headerlink" title="14、配置hexo的repository"></a>14、配置hexo的repository</h3><p>找到当前文件下的 _config.yml 文件，在文件最后修改repository。</p><blockquote><p>deploy:<br>    type: git<br>    repository: <a href="https://github.com/youname/yourrepo.git" target="_blank" rel="noopener">https://github.com/youname/yourrepo.git</a><br>    branch: master</p></blockquote><h3 id="15、安装hexo打包拓展"><a href="#15、安装hexo打包拓展" class="headerlink" title="15、安装hexo打包拓展"></a>15、安装hexo打包拓展</h3><p>我们在使用打包提交之前需要先安装一个拓展插件</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><h3 id="16、打包提交到github"><a href="#16、打包提交到github" class="headerlink" title="16、打包提交到github"></a>16、打包提交到github</h3><p>使用打包与生成指令，生成静态页面并提交到github</p><blockquote><p>hexo d -g</p></blockquote><p>提交成功后你就可以在你的GitHub上面看到自己提交的静态页面代码了</p><h3 id="17、netlify自动部署"><a href="#17、netlify自动部署" class="headerlink" title="17、netlify自动部署"></a>17、netlify自动部署</h3><p>我们可以使用<a href="https://app.netlify.com/" target="_blank" rel="noopener">netlify</a>进行GitHub代码的自动部署，并且可以使用netlify功能进行域名绑定和使用他免费的HTTPS证书。具体教程<a href="https://www.cnblogs.com/codernie/p/9062104.html" target="_blank" rel="noopener">传送门</a>。</p><h3 id="18、自定义域名"><a href="#18、自定义域名" class="headerlink" title="18、自定义域名"></a>18、自定义域名</h3><p>使用netlify的好处就是，我们可以开心的使用自己的域名进行访问（域名不备案也是可以使用的），我们在netlify设置成功后可以获得一个netlify的二级域名，这时候我们可以在自己的域名管理处设置一下CNAME把自己的域名解析到netlify，这样我们就可以开开心心的使用自己的域名访问自己的blog了！<br><img src="https://i.loli.net/2018/11/12/5be8e7dd84669.png" alt="cname.png"></p><p><strong> 18步搞定个人站 </strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
